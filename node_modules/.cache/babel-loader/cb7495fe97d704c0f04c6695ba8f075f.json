{"ast":null,"code":"'use strict';\n\nconst ResourceBase = require('./resourceBase');\n\nclass Letters extends ResourceBase {\n  constructor(config) {\n    super('letters', config);\n  }\n\n  list(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this._transmit('GET', null, options, null, callback);\n  }\n\n  retrieve(id, callback) {\n    return this._transmit('GET', id, null, null, callback);\n  }\n\n  delete(id, callback) {\n    return this._transmit('DELETE', id, null, null, callback);\n  }\n\n  create(params, headers, callback) {\n    let isBuffer;\n\n    if (params.file) {\n      isBuffer = Buffer.isBuffer(params.file);\n\n      if (isBuffer) {\n        params.file = {\n          value: params.file,\n          options: {\n            filename: 'file.pdf'\n          }\n        };\n      }\n    }\n\n    for (const p in params) {\n      if (p === 'merge_variables' && params[p] instanceof Object) {\n        params[p] = JSON.stringify(params[p]);\n      }\n\n      if (p === 'file' || !(params[p] instanceof Object)) {\n        continue;\n      }\n\n      for (const key in params[p]) {\n        params[`${p}[${key}]`] = params[p][key];\n      }\n\n      delete params[p];\n    }\n\n    return this._transmit('POST', null, null, params, headers, callback);\n  }\n\n}\n\nmodule.exports = Letters;","map":{"version":3,"sources":["/Users/isaac/Downloads/react_spa/node_modules/lob/lib/resources/letters.js"],"names":["ResourceBase","require","Letters","constructor","config","list","options","callback","_transmit","retrieve","id","delete","create","params","headers","isBuffer","file","Buffer","value","filename","p","Object","JSON","stringify","key","module","exports"],"mappings":"AAAA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,gBAAD,CAA5B;;AAEA,MAAMC,OAAN,SAAsBF,YAAtB,CAAmC;AAEjCG,EAAAA,WAAW,CAAEC,MAAF,EAAU;AACnB,UAAM,SAAN,EAAiBA,MAAjB;AACD;;AAEDC,EAAAA,IAAI,CAAEC,OAAF,EAAWC,QAAX,EAAqB;AAEvB,QAAI,OAAOD,OAAP,KAAmB,UAAvB,EAAmC;AACjCC,MAAAA,QAAQ,GAAGD,OAAX;AACAA,MAAAA,OAAO,GAAG,EAAV;AACD;;AAED,WAAO,KAAKE,SAAL,CAAe,KAAf,EAAsB,IAAtB,EAA4BF,OAA5B,EAAqC,IAArC,EAA2CC,QAA3C,CAAP;AACD;;AAEDE,EAAAA,QAAQ,CAAEC,EAAF,EAAMH,QAAN,EAAgB;AACtB,WAAO,KAAKC,SAAL,CAAe,KAAf,EAAsBE,EAAtB,EAA0B,IAA1B,EAAgC,IAAhC,EAAsCH,QAAtC,CAAP;AACD;;AAEDI,EAAAA,MAAM,CAAED,EAAF,EAAMH,QAAN,EAAgB;AACpB,WAAO,KAAKC,SAAL,CAAe,QAAf,EAAyBE,EAAzB,EAA6B,IAA7B,EAAmC,IAAnC,EAAyCH,QAAzC,CAAP;AACD;;AAEDK,EAAAA,MAAM,CAAEC,MAAF,EAAUC,OAAV,EAAmBP,QAAnB,EAA6B;AAEjC,QAAIQ,QAAJ;;AAEA,QAAIF,MAAM,CAACG,IAAX,EAAiB;AACfD,MAAAA,QAAQ,GAAGE,MAAM,CAACF,QAAP,CAAgBF,MAAM,CAACG,IAAvB,CAAX;;AAEA,UAAID,QAAJ,EAAc;AACZF,QAAAA,MAAM,CAACG,IAAP,GAAc;AACZE,UAAAA,KAAK,EAAEL,MAAM,CAACG,IADF;AAEZV,UAAAA,OAAO,EAAE;AAAEa,YAAAA,QAAQ,EAAE;AAAZ;AAFG,SAAd;AAID;AACF;;AAED,SAAK,MAAMC,CAAX,IAAgBP,MAAhB,EAAwB;AAEtB,UAAIO,CAAC,KAAK,iBAAN,IAA2BP,MAAM,CAACO,CAAD,CAAN,YAAqBC,MAApD,EAA4D;AAC1DR,QAAAA,MAAM,CAACO,CAAD,CAAN,GAAYE,IAAI,CAACC,SAAL,CAAeV,MAAM,CAACO,CAAD,CAArB,CAAZ;AACD;;AAED,UAAIA,CAAC,KAAK,MAAN,IAAgB,EAAEP,MAAM,CAACO,CAAD,CAAN,YAAqBC,MAAvB,CAApB,EAAoD;AAClD;AACD;;AAED,WAAK,MAAMG,GAAX,IAAkBX,MAAM,CAACO,CAAD,CAAxB,EAA6B;AAC3BP,QAAAA,MAAM,CAAE,GAAEO,CAAE,IAAGI,GAAI,GAAb,CAAN,GAAyBX,MAAM,CAACO,CAAD,CAAN,CAAUI,GAAV,CAAzB;AACD;;AAED,aAAOX,MAAM,CAACO,CAAD,CAAb;AACD;;AAED,WAAO,KAAKZ,SAAL,CAAe,MAAf,EAAuB,IAAvB,EAA6B,IAA7B,EAAmCK,MAAnC,EAA2CC,OAA3C,EAAoDP,QAApD,CAAP;AACD;;AAzDgC;;AA6DnCkB,MAAM,CAACC,OAAP,GAAiBxB,OAAjB","sourcesContent":["'use strict';\n\nconst ResourceBase = require('./resourceBase');\n\nclass Letters extends ResourceBase {\n\n  constructor (config) {\n    super('letters', config);\n  }\n\n  list (options, callback) {\n\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this._transmit('GET', null, options, null, callback);\n  }\n\n  retrieve (id, callback) {\n    return this._transmit('GET', id, null, null, callback);\n  }\n\n  delete (id, callback) {\n    return this._transmit('DELETE', id, null, null, callback);\n  }\n\n  create (params, headers, callback) {\n\n    let isBuffer;\n\n    if (params.file) {\n      isBuffer = Buffer.isBuffer(params.file);\n\n      if (isBuffer) {\n        params.file = {\n          value: params.file,\n          options: { filename: 'file.pdf' }\n        };\n      }\n    }\n\n    for (const p in params) {\n\n      if (p === 'merge_variables' && params[p] instanceof Object) {\n        params[p] = JSON.stringify(params[p]);\n      }\n\n      if (p === 'file' || !(params[p] instanceof Object)) {\n        continue;\n      }\n\n      for (const key in params[p]) {\n        params[`${p}[${key}]`] = params[p][key];\n      }\n\n      delete params[p];\n    }\n\n    return this._transmit('POST', null, null, params, headers, callback);\n  }\n\n}\n\nmodule.exports = Letters;\n"]},"metadata":{},"sourceType":"script"}